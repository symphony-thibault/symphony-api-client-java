description = 'Symphony Java BDK Legacy Module'

ext.projectVersion = '1.3.0-SNAPSHOT'
ext.isReleaseVersion = !ext.projectVersion.endsWith('SNAPSHOT')

ext.symphonyRepoUrl = project.properties['symphonyRepoUrl'] ?: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
ext.symphonyRepoUser = project.properties['symphonyRepoUser'] ?: 'Symphony artifactory user'
ext.symphonyRepoPassword = project.properties['symphonyRepoPassword'] ?: 'Symphony artifactory password'

ext.pomDefinition = {
    url = 'https://github.com/SymphonyPlatformSolutions/symphony-api-client-java'
    licenses {
        license {
            name = 'MIT License'
            url = 'http://www.opensource.org/licenses/mit-license.php'
        }
    }
    developers {
        developer {
            name = 'Symphony Platform Solutions'
            email = 'platformsolutions@symphony.com'
            organization = 'Symphony Communication Services'
            organizationUrl = 'https://symphony.com/'
        }
    }
    scm {
        connection = 'scm:git:git://github.com/SymphonyPlatformSolutions/symphony-api-client-java.git'
        developerConnection = 'scm:git:ssh://github.com/SymphonyPlatformSolutions/symphony-api-client-java.git'
        url = 'https://github.com/SymphonyPlatformSolutions/symphony-api-client-java'
    }
}

allprojects {
    group = 'com.symphony.platformsolutions'
    version = projectVersion

    defaultTasks 'build'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0'
    }
}

apply plugin: 'io.codearte.nexus-staging'

nexusStaging {
    username = rootProject.ext.symphonyRepoUser
    password = rootProject.ext.symphonyRepoPassword
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    repositories {
        mavenCentral()
    }

    dependencies {
        constraints {
            compileOnly 'org.projectlombok:lombok:1.18.12'
            annotationProcessor 'org.projectlombok:lombok:1.18.12'

            implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.2'
            implementation 'com.github.jknack:handlebars-guava-cache:4.2.0'
            implementation 'com.github.jknack:handlebars-jackson2:4.2.0'
            implementation 'com.github.jknack:handlebars:4.2.0'
            implementation 'com.google.code.findbugs:jsr305:3.0.2'
            implementation 'com.googlecode.json-simple:json-simple:1.1.1'
            implementation 'commons-beanutils:commons-beanutils:1.9.4'
            implementation 'commons-codec:commons-codec:1.15'
            implementation 'commons-io:commons-io:2.6'
            implementation 'io.github.resilience4j:resilience4j-bulkhead:1.4.0'
            implementation 'io.github.resilience4j:resilience4j-circuitbreaker:1.4.0'
            implementation 'io.github.resilience4j:resilience4j-retry:1.4.0'
            implementation 'io.jsonwebtoken:jjwt:0.9.1'
            implementation 'io.springfox:springfox-swagger2:2.9.2'
            implementation 'io.springfox:springfox-swagger-ui:2.9.2'
            implementation 'javax.servlet:javax.servlet-api:4.0.1'
            implementation 'javax.xml.bind:jaxb-api:2.3.1'
            implementation 'org.apiguardian:apiguardian-api:1.1.0'
            implementation 'org.bitbucket.b_c:jose4j:0.7.2'
            implementation 'org.glassfish.jersey.connectors:jersey-apache-connector:2.32'
            implementation 'org.glassfish.jersey.core:jersey-client:2.32'
            implementation 'org.glassfish.jersey.inject:jersey-hk2:2.32'
            implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.32'
            implementation 'org.glassfish.jersey.media:jersey-media-multipart:2.32'
            implementation 'org.owasp.esapi:esapi:2.2.0.0'
            implementation 'org.projectlombok:lombok:1.18.12'
            implementation 'org.slf4j:slf4j-api:1.7.30'
            implementation 'org.slf4j:slf4j-log4j12:1.7.30'
            implementation 'org.springframework.boot:spring-boot-starter-security:2.3.0.RELEASE'
            implementation 'org.springframework.boot:spring-boot-starter-web:2.3.0.RELEASE'
            implementation 'org.springframework.boot:spring-boot-starter-aop:2.3.0.RELEASE'
            implementation 'org.springframework.boot:spring-boot-starter-actuator:2.3.0.RELEASE'
            implementation 'org.symphonyoss.symphony:messageml:0.9.57'
            implementation 'io.micrometer:micrometer-registry-prometheus:1.5.1'

            testCompileOnly 'org.projectlombok:lombok:1.18.12'
            testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

            implementation 'junit:junit:4.13'
            implementation 'org.mockito:mockito-core:3.4.6'
            implementation 'com.github.tomakehurst:wiremock-jre8:2.26.3'
        }
    }

    sourceCompatibility = '1.8'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    javadoc {
        options.encoding = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                    "Implementation-Version": project.version)
        }
    }

    test {
        useJUnitPlatform()
    }

    publishing {
        repositories {
            maven {
                credentials {
                    username rootProject.ext.symphonyRepoUser
                    password rootProject.ext.symphonyRepoPassword
                }
                url rootProject.ext.symphonyRepoUrl
            }
        }

        publications {
            maven(MavenPublication) {
                from(components.java)
                pom(rootProject.ext.pomDefinition)
                pom.withXml {
                    // otherwise project description is evaluated too early
                    asNode().children().first().plus {
                        setResolveStrategy(Closure.DELEGATE_FIRST)
                        'name' project.name
                        'description' project.description
                    }
                }
            }
        }
    }

    signing {
        required { rootProject.isReleaseVersion }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign) {
    onlyIf { ext.isReleaseVersion }
}
