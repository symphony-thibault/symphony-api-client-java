ext.projectVersion = '1.6.0-SNAPSHOT'
ext.isReleaseVersion = !ext.projectVersion.endsWith('SNAPSHOT')

ext.symphonyRepoUrl = project.properties['symphonyRepoUrl'] ?: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
ext.symphonyRepoUser = project.properties['symphonyRepoUser'] ?: 'Symphony artifactory user'
ext.symphonyRepoPassword = project.properties['symphonyRepoPassword'] ?: 'Symphony artifactory password'

ext.pomDefinition = {
    url = 'https://github.com/SymphonyPlatformSolutions/symphony-api-client-java'
    licenses {
        license {
            name = 'MIT License'
            url = 'http://www.opensource.org/licenses/mit-license.php'
        }
    }
    developers {
        developer {
            name = 'Symphony Platform Solutions'
            email = 'platformsolutions@symphony.com'
            organization = 'Symphony Communication Services'
            organizationUrl = 'https://symphony.com/'
        }
    }
    scm {
        connection = 'scm:git:git://github.com/SymphonyPlatformSolutions/symphony-api-client-java.git'
        developerConnection = 'scm:git:ssh://github.com/SymphonyPlatformSolutions/symphony-api-client-java.git'
        url = 'https://github.com/SymphonyPlatformSolutions/symphony-api-client-java'
    }
}

allprojects {
    group = 'com.symphony.platformsolutions'
    version = projectVersion

    defaultTasks 'build'
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0'
    }
}

apply plugin: 'io.codearte.nexus-staging'

subprojects {
    apply plugin: 'signing'
}

tasks.withType(Sign) {
    onlyIf { ext.isReleaseVersion }
}

nexusStaging {
    username = rootProject.ext.symphonyRepoUser
    password = rootProject.ext.symphonyRepoPassword
}

configure(subprojects.findAll { it.name != 'symphony-bdk-bom' }) {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'

    repositories {
        mavenCentral()
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
                pom(rootProject.ext.pomDefinition)
                pom.withXml {
                    // otherwise project description is evaluated too early
                    asNode().children().first().plus {
                        setResolveStrategy(Closure.DELEGATE_FIRST)
                        'name' project.name
                        'description' project.description
                    }
                }
            }
        }
    }

    signing {
        required { rootProject.isReleaseVersion }
        sign publishing.publications.maven
    }

    sourceCompatibility = '1.8'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    javadoc {
        options.encoding = 'UTF-8'
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    jar {
        manifest {
            attributes("Implementation-Title": project.name,
                    "Implementation-Version": project.version)
        }
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        implementation platform(project(':symphony-bdk-bom'))
        annotationProcessor platform(project(':symphony-bdk-bom'))
        testAnnotationProcessor platform(project(':symphony-bdk-bom'))
    }
}

// do not publish example modules
configure(subprojects.findAll { !it.name.contains('example') }) {
    apply plugin: 'maven-publish'

    publishing {
        repositories {
            maven {
                credentials {
                    username rootProject.ext.symphonyRepoUser
                    password rootProject.ext.symphonyRepoPassword
                }
                url rootProject.ext.symphonyRepoUrl
            }
        }
    }
}
